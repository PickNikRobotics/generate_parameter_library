{% for mapped_param in mapped_params -%}
{%- filter indent(width=4*loop.index0) %}
for value_{{loop.index}} in updated_params.{{mapped_param}}:
{%- endfilter -%}
{% endfor -%}
{%- filter indent(width=4*(mapped_params|length)) %}
{% if struct_name != "" %}
{{param_struct_instance}}.{{struct_name}}{% for map in parameter_map%}.add_entry(value_{{loop.index}}){% endfor %}
entry = {{param_struct_instance}}.{{struct_name}}{% for map in parameter_map%}.get_entry(value_{{loop.index}}){% endfor %}
param_name = f"{self.prefix_}{{struct_name}}.{% for map in parameter_map%}{value_{{loop.index}}}.{% endfor %}{{parameter_field}}"
{% else %}
{{param_struct_instance}}{% for map in parameter_map%}.add_entry(value_{{loop.index}}){% endfor %}
entry = {{param_struct_instance}}{% for map in parameter_map%}.get_entry(value_{{loop.index}}){% endfor %}
param_name = f"{self.prefix_}{% for map in parameter_map%}{value_{{loop.index}}}.{% endfor %}{{parameter_field}}"
{% endif -%}
if not self.node_.has_parameter(self.prefix_ + param_name):
{%- filter indent(width=4) %}
descriptor = ParameterDescriptor(description="{{parameter_description|valid_string_python}}", read_only = {{parameter_read_only}})
{%- for validation in parameter_validations if ("bounds" in validation.function_name or "lt" in validation.function_name or "gt" in validation.function_name) %}
{%- if "DOUBLE" in parameter_type %}
{%- if validation.arguments|length == 2 %}
descriptor.floating_point_range.append(FloatingPointRange())
descriptor.floating_point_range[-1].from_value = {{validation.arguments[0]}}
descriptor.floating_point_range[-1].to_value = {{validation.arguments[1]}}
{%- elif ("lower" in validation.function_name or "gt" == validation.function_base_name or "gt_eq" == validation.function_base_name) and validation.arguments|length == 1 %}
descriptor.floating_point_range.append(FloatingPointRange())
descriptor.floating_point_range[-1].from_value = {{validation.arguments[0]}}
descriptor.floating_point_range[-1].to_value = float('inf')
{%- elif ("upper" in validation.function_name or "lt" == validation.function_base_name or "lt_eq" == validation.function_base_name) and validation.arguments|length == 1 %}
descriptor.floating_point_range.append(FloatingPointRange())
descriptor.floating_point_range[-1].from_value = -float('inf')
descriptor.floating_point_range[-1].to_value = {{validation.arguments[0]}}
{%- endif %}
{%- elif "INTEGER" in parameter_type %}
{%- if validation.arguments|length == 2 %}
descriptor.integer_range.append(IntegerRange())
descriptor.integer_range[-1].from_value = {{validation.arguments[0]}}
descriptor.integer_range[-1].to_value = {{validation.arguments[1]}}
{%- elif ("lower" in validation.function_name or "gt" == validation.function_base_name or "gt_eq" == validation.function_base_name) and validation.arguments|length == 1 %}
descriptor.integer_range.append(IntegerRange())
descriptor.integer_range[-1].from_value = {{validation.arguments[0]}}
descriptor.integer_range[-1].to_value = 2**31-1
{%- elif ("upper" in validation.function_name or "lt" == validation.function_base_name or "lt_eq" == validation.function_base_name) and validation.arguments|length == 1 %}
descriptor.integer_range.append(IntegerRange())
descriptor.integer_range[-1].from_value = -2**31-1
descriptor.integer_range[-1].to_value = {{validation.arguments[0]}}
{%- endif %}
{%- endif %}
{%- endfor %}
{%- if not default_value|length %}
parameter = rclpy.Parameter.Type.{{parameter_type}}
{% endif -%}
{%- if default_value|length %}
parameter = entry.{{parameter_field}}
{% endif -%}
self.node_.declare_parameter(param_name, parameter, descriptor)
{% endfilter -%}
{{set_runtime_parameter-}}
{% endfilter -%}
