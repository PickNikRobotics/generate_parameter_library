{{comments}}

from rcl_interfaces.msg import ParameterDescriptor
from rcl_interfaces.msg import SetParametersResult
from rclpy.clock import Clock
from rclpy.time import Time
import copy
import rclpy


class {{namespace}}:
{%- filter indent(width=4) %}
def __init__(self):
    pass

class Params:
{%- filter indent(width=4) %}
def __init__(self):
    # for detecting if the parameter struct has been updated
    self.stamp_ = Time()
{%- filter indent(width=4) %}
{{struct_content-}}
{% endfilter -%}
{% endfilter -%}
{%- endfilter %}


    class ParamListener:
        def __init__(self, node, prefix=""):
            node.declare_parameter('my_parameter', 'world')
            self.prefix_ = prefix
            self.params_ = {{namespace}}.Params()
            self.node_ = node
            #self.logger_ = None
            #if (len(self.prefix_) > 0):
            self.logger_ = rclpy.logging.get_logger("{{namespace}}." + prefix)

            self.declare_params()

            self.node_.add_on_set_parameters_callback(self.update)
            self.clock_ = Clock()

        def get_params(self):
            tmp = self.params_.stamp_
            self.params_.stamp_ = None
            paramCopy = copy.deepcopy(self.params_)
            paramCopy.stamp_ = tmp
            return paramCopy

        def is_old(self, other_param):
            return self.params_.stamp_ != other_param.stamp_

        def update(self, parameters):
            updated_params = self.get_params()
            # TODO: need validation and dynamic parameters

            for param in parameters:
{%- filter indent(width=16) %}
{{update_params_set}}
{%- endfilter %}

            updated_params.stamp_ = self.clock_.now()
            self.update_internal_params(updated_params)
            return SetParametersResult(successful=True)

        def update_internal_params(self, updated_params):
            self.params_ = updated_params

        def to_parameter_value(self, value):
            assert(0)
            # I think it can be deleted

        def declare_params(self):
            updated_params = self.get_params()
            # declare all parameters and give default values to non-required ones
{%- filter indent(width=12) %}
{{declare_params}}
{%- endfilter %}
            # get parameters and fill struct fields
            # TODO: need to update params with current values from get_parameter
            # TODO: need validation




