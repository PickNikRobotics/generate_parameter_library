{{comments}}

import rclpy
from rclpy.time import Time

class {{namespace}}:
{%- filter indent(width=4) %}
class Params:
{%- filter indent(width=4) %}
{{struct_content-}}
# for detecting if the parameter struct has been updated
__stamp = Time()
{% endfilter -%}
{%- endfilter %}





  class ParamListener{
  public:
    // throws rclcpp::exceptions::InvalidParameterValueException on initialization if invalid parameter are loaded
    ParamListener(rclcpp::Node::SharedPtr node, std::string const& prefix = "")
    : ParamListener(node->get_node_parameters_interface(), prefix) {}

    ParamListener(rclcpp_lifecycle::LifecycleNode::SharedPtr node, std::string const& prefix = "")
    : ParamListener(node->get_node_parameters_interface(), prefix) {}

    ParamListener(const std::shared_ptr<rclcpp::node_interfaces::NodeParametersInterface>& parameters_interface, std::string const& prefix = ""){
      prefix_ = prefix;
      if (!prefix_.empty() && prefix_.back() != '.') {
        prefix_ += ".";
      }

      if (!prefix.empty()) {
        logger_ = rclcpp::get_logger("{{namespace}}." + prefix);
      }

      parameters_interface_ = parameters_interface;
      declare_params();
      auto update_param_cb = [this](const std::vector<rclcpp::Parameter> &parameters){return this->update(parameters);};
      handle_ = parameters_interface_->add_on_set_parameters_callback(update_param_cb);
      clock_ = rclcpp::Clock();
    }

    Params get_params() const{
      std::lock_guard<std::mutex> lock(mutex_);
      return params_;
    }

    bool is_old(Params const& other) const {
      std::lock_guard<std::mutex> lock(mutex_);
      return params_.__stamp != other.__stamp;
    }

    StackParams get_stack_params() {
      Params params = get_params();
      StackParams output;

{%- filter indent(width=6) %}
{{set_stack_params}}
{%- endfilter %}

      return output;
    }

    void refresh_dynamic_parameters() {
      auto updated_params = get_params();
      // TODO remove any destroyed dynamic parameters
{%- filter indent(width=6) %}
{{remove_dynamic_parameters}}
{%- endfilter %}
      // declare any new dynamic parameters
      rclcpp::Parameter param;
{%- filter indent(width=6) %}
{{update_declare_dynamic_parameters}}
{%- endfilter %}
    }

    rcl_interfaces::msg::SetParametersResult update(const std::vector<rclcpp::Parameter> &parameters) {
      auto updated_params = get_params();

      for (const auto &param: parameters) {
{%- filter indent(width=8) %}
{{update_params_set}}
{%- endfilter %}
      }
{% if update_dynamic_parameters|length %}
      // update dynamic parameters
      for (const auto &param: parameters) {
{%- filter indent(width=8) %}
{{update_dynamic_parameters}}
{%- endfilter %}
      }
{%- endif %}
      updated_params.__stamp = clock_.now();
      update_interal_params(updated_params);
      return rsl::to_parameter_result_msg({});
    }

    void declare_params(){
      auto updated_params = get_params();
      // declare all parameters and give default values to non-required ones
{%- filter indent(width=6) %}
{{declare_params}}
{%- endfilter %}
      // get parameters and fill struct fields
      rclcpp::Parameter param;

{%- filter indent(width=6) %}
{{declare_params_set}}
{%- endfilter %}
{% if declare_set_dynamic_params|length %}
{% filter indent(width=6) %}
// declare and set all dynamic parameters
{{declare_set_dynamic_params}}
{%- endfilter %}
{%- endif %}

      updated_params.__stamp = clock_.now();
      update_interal_params(updated_params);
    }

    private:
      void update_interal_params(Params updated_params) {
        std::lock_guard<std::mutex> lock(mutex_);
        params_ = updated_params;
      }

      std::string prefix_;
      Params params_;
      rclcpp::Clock clock_;
      std::shared_ptr<rclcpp::node_interfaces::OnSetParametersCallbackHandle> handle_;
      std::shared_ptr<rclcpp::node_interfaces::NodeParametersInterface> parameters_interface_;
      rclcpp::Logger logger_ = rclcpp::get_logger("{{namespace}}");
      std::mutex mutable mutex_;
  };

} // namespace {{namespace}}
