{{COMMENTS}}

#pragma once

#include <rclcpp/node.hpp>
#include <rclcpp_lifecycle/lifecycle_node.hpp>
#include <vector>
#include <string>
#include <set>
#include <sstream>

namespace gen_param_struct_validators {
{%- filter indent(width=2) %}
{{validation_functions}}
{% if USER_VALIDATORS|length -%}
{{USER_VALIDATORS}}
{%- endif -%}
{% endfilter -%}
} // namespace gen_param_struct_validators

namespace {{namespace}} {
{%- filter indent(width=2) %}
struct Params {
{%- filter indent(width=2) %}
{{struct_content-}}
// for detecting if the parameter struct has been updated
rclcpp::Time __stamp;
{% endfilter -%}
};
{%- endfilter %}

  class ParamListener{
  public:
    // throws rclcpp::exceptions::InvalidParameterValueException on initialization if invalid parameter are loaded
    ParamListener(rclcpp::Node::SharedPtr node)
    : ParamListener(node->get_node_parameters_interface()) {}

    ParamListener(rclcpp_lifecycle::LifecycleNode::SharedPtr node)
    : ParamListener(node->get_node_parameters_interface()) {}

    ParamListener(const std::shared_ptr<rclcpp::node_interfaces::NodeParametersInterface>& parameters_interface){
      declare_params(parameters_interface);
      auto update_param_cb = [this](const std::vector<rclcpp::Parameter> &parameters){return this->update(parameters);};
      handle_ = parameters_interface->add_on_set_parameters_callback(update_param_cb);
      clock_ = rclcpp::Clock();
    }

    Params get_params() const{
      return params_;
    }

    bool is_old(Params const& other) const {
      return params_.__stamp != other.__stamp;
    }

    rcl_interfaces::msg::SetParametersResult update(const std::vector<rclcpp::Parameter> &parameters) {
      rcl_interfaces::msg::SetParametersResult result;
      result.successful = true;
      gen_param_struct_validators::Result validation_result;

      result.reason = "success";
      for (const auto &param: parameters) {
{%- filter indent(width=8) %}
{{update_params_set}}
{%- endfilter %}
      }

      if (result.successful){
        params_.__stamp = clock_.now();
      }

      return result;
    }

    void declare_params(const std::shared_ptr<rclcpp::node_interfaces::NodeParametersInterface>& parameters_interface){
      // declare all parameters and give default values to non-required ones
{%- filter indent(width=6) %}
{{declare_params}}
{%- endfilter %}
      // get parameters and fill struct fields
      rclcpp::Parameter param;
      gen_param_struct_validators::Result validation_result;

{%- filter indent(width=6) %}
{{declare_params_set}}
{%- endfilter %}
      params_.__stamp = clock_.now();
    }

    private:
      std::mutex mutex_;
      Params params_;
      rclcpp::Clock clock_;
      std::shared_ptr<rclcpp::node_interfaces::OnSetParametersCallbackHandle> handle_;
  };

} // namespace **NAMESPACE**
