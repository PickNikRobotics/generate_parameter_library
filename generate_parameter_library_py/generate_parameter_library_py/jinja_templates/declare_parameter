if (!parameters_interface_->has_parameter(prefix_ + "{{parameter_name}}")) {
{%- filter indent(width=4) %}
rcl_interfaces::msg::ParameterDescriptor descriptor;
descriptor.description = "{{parameter_description}}";
descriptor.read_only = {{parameter_read_only}};
{%- for validation in parameter_validations if "bounds" in validation.function_name or "t_eq" in validation.function_name %}
{%- if "DOUBLE" in parameter_type %}
{%- if validation.arguments|length == 2 %}
descriptor.floating_point_range.resize({{loop.index}});
descriptor.floating_point_range.at({{loop.index0}}).from_value = {{validation.arguments[0]}};
descriptor.floating_point_range.at({{loop.index0}}).to_value = {{validation.arguments[1]}};
{%- elif "lower" in validation.function_name or "gt_eq" in validation.function_name %}
descriptor.floating_point_range.resize({{loop.index}});
descriptor.floating_point_range.at({{loop.index0}}).from_value = {{validation.arguments[0]}};
{%- elif "upper" in validation.function_name or "lt_eq" in validation.function_name %}
descriptor.floating_point_range.resize({{loop.index}});
descriptor.floating_point_range.at({{loop.index0}}).to_value = {{validation.arguments[0]}};
{%- endif %}
{%- elif "INTEGER" in parameter_type %}
{%- if validation.arguments|length == 2 %}
descriptor.integer_range.resize({{loop.index}});
descriptor.integer_range.at({{loop.index0}}).from_value = {{validation.arguments[0]}};
descriptor.integer_range.at({{loop.index0}}).to_value = {{validation.arguments[1]}};
{%- elif "lower" in validation.function_name or "gt_eq" in validation.function_name %}
descriptor.integer_range.resize({{loop.index}});
descriptor.integer_range.at({{loop.index0}}).from_value = {{validation.arguments[0]}};
{%- elif "upper" in validation.function_name or "lt_eq" in validation.function_name %}
descriptor.integer_range.resize({{loop.index}});
descriptor.integer_range.at({{loop.index0}}).to_value = {{validation.arguments[0]}};
{%- endif %}
{%- endif %}
{%- endfor %}
{%- if not parameter_value|length %}
auto parameter = rclcpp::ParameterType::PARAMETER_{{parameter_type}};
{% endif -%}
{%- if parameter_value|length %}
auto parameter = to_parameter_value(updated_params.{{parameter_value}});
{% endif -%}
parameters_interface_->declare_parameter(prefix_ + "{{parameter_name}}", parameter, descriptor);
{% endfilter -%}
}
