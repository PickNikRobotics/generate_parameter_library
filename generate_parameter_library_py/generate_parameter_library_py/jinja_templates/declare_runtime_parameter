for (const auto & value : {{param_struct_instance}}.{{mapped_param}}){
{%- filter indent(width=4) %}
auto& entry = {{param_struct_instance}}.{{parameter_map}}[value];
auto param_name = fmt::format("{}{}.{}.{}", prefix_, "{{struct_name}}", value, "{{parameter_field}}");
if (!parameters_interface_->has_parameter(param_name)) {
{%- filter indent(width=4) %}
rcl_interfaces::msg::ParameterDescriptor descriptor;
descriptor.description = "{{parameter_description}}";
descriptor.read_only = {{parameter_read_only}};
{%- for validation in parameter_validations %}
{%- if validation.function_name.startswith("element_bounds") %}
{%- if parameter_type == "DOUBLE_ARRAY" %}
descriptor.floating_point_range.at(0).from_value = {{validation.arguments[0]}};
descriptor.floating_point_range.at(0).to_value = {{validations.arguments[1]}};
{%- elif parameter_type =="INTEGER_ARRAY" %}
descriptor.integer_range.at(0).from_value = {{validations.arguments[0]}};
descriptor.integer_range.at(0).to_value = {{validation.arguments[1]}};
{%- endif %}
{%- endif %}
{%- endfor %}
{%- if not default_value|length %}
auto parameter = rclcpp::ParameterType::PARAMETER_{{parameter_type}};
{% endif -%}
{%- if default_value|length %}
auto parameter = rclcpp::ParameterValue(entry.{{parameter_field}});
{% endif -%}
parameters_interface_->declare_parameter(param_name, parameter, descriptor);
{% endfilter -%}
}
{{set_runtime_parameter-}}
{% endfilter -%}
}
